// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/common/v1/common.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PageArg with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PageArg) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOffset() != 0 {

		if m.GetOffset() < 0 {
			return PageArgValidationError{
				field:  "Offset",
				reason: "value must be greater than or equal to 0",
			}
		}

	}

	if m.GetLimit() != 0 {

		if m.GetLimit() <= 0 {
			return PageArgValidationError{
				field:  "Limit",
				reason: "value must be greater than 0",
			}
		}

	}

	// no validation rules for OrderBy

	if m.GetOrderType() != "" {

		if _, ok := _PageArg_OrderType_InLookup[m.GetOrderType()]; !ok {
			return PageArgValidationError{
				field:  "OrderType",
				reason: "value must be in list [asc desc]",
			}
		}

	}

	if m.GetPageNo() != 0 {

		if m.GetPageNo() <= 0 {
			return PageArgValidationError{
				field:  "PageNo",
				reason: "value must be greater than 0",
			}
		}

	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() <= 0 {
			return PageArgValidationError{
				field:  "PageSize",
				reason: "value must be greater than 0",
			}
		}

	}

	return nil
}

// PageArgValidationError is the validation error returned by PageArg.Validate
// if the designated constraints aren't met.
type PageArgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageArgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageArgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageArgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageArgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageArgValidationError) ErrorName() string { return "PageArgValidationError" }

// Error satisfies the builtin error interface
func (e PageArgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageArg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageArgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageArgValidationError{}

var _PageArg_OrderType_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

// Validate checks the field values on FieldMask with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FieldMask) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPaths()) < 1 {
		return FieldMaskValidationError{
			field:  "Paths",
			reason: "value must contain at least 1 item(s)",
		}
	}

	_FieldMask_Paths_Unique := make(map[string]struct{}, len(m.GetPaths()))

	for idx, item := range m.GetPaths() {
		_, _ = idx, item

		if _, exists := _FieldMask_Paths_Unique[item]; exists {
			return FieldMaskValidationError{
				field:  fmt.Sprintf("Paths[%v]", idx),
				reason: "repeated value must contain unique items",
			}
		} else {
			_FieldMask_Paths_Unique[item] = struct{}{}
		}

		// no validation rules for Paths[idx]
	}

	return nil
}

// FieldMaskValidationError is the validation error returned by
// FieldMask.Validate if the designated constraints aren't met.
type FieldMaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldMaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldMaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldMaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldMaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldMaskValidationError) ErrorName() string { return "FieldMaskValidationError" }

// Error satisfies the builtin error interface
func (e FieldMaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFieldMask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldMaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldMaskValidationError{}
