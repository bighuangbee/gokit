// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 500
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 500
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

// 内部错误
func IsInternalError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InternalError.String() && e.Code == 500
}

// 内部错误
func ErrorInternalError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_InternalError.String(), fmt.Sprintf(format, args...))
}

// 数据库错误
func IsDbError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DbError.String() && e.Code == 500
}

// 数据库错误
func ErrorDbError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DbError.String(), fmt.Sprintf(format, args...))
}

// 无效的参数
func IsInvalidParameter(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_InvalidParameter.String() && e.Code == 500
}

// 无效的参数
func ErrorInvalidParameter(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_InvalidParameter.String(), fmt.Sprintf(format, args...))
}

// 请求超时
func IsTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Timeout.String() && e.Code == 500
}

// 请求超时
func ErrorTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_Timeout.String(), fmt.Sprintf(format, args...))
}

// token无效
func IsUnauthenticated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Unauthenticated.String() && e.Code == 500
}

// token无效
func ErrorUnauthenticated(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_Unauthenticated.String(), fmt.Sprintf(format, args...))
}

// 记录未找到
func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RecordNotFound.String() && e.Code == 500
}

// 记录未找到
func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_RecordNotFound.String(), fmt.Sprintf(format, args...))
}

// 记录已经存在
func IsRecordIsExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RecordIsExists.String() && e.Code == 500
}

// 记录已经存在
func ErrorRecordIsExists(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_RecordIsExists.String(), fmt.Sprintf(format, args...))
}

// http调用失败
func IsHttpError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_HttpError.String() && e.Code == 500
}

// http调用失败
func ErrorHttpError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_HttpError.String(), fmt.Sprintf(format, args...))
}
